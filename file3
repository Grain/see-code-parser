var code = {"type":"function", "code":"void atree_add(struct atree *at, int i)", "inner":[{"type":"statement", "code":"assert(at != NULL);", "inner":[]},{"type":"statement", "code":"assert(i != EMPTY);", "inner":[]},{"type":"statement", "code":"int current = 0;", "inner":[]},{"type":"statement", "code":"int max = expt(2, at->maxheight) - 1;", "inner":[]},{"type":"while", "code":"while (true)", "inner":[{"type":"if", "code":"if (current >= max)", "inner":[{"type":"statement", "code":"at->maxheight++;", "inner":[]},{"type":"statement", "code":"at->data = realloc(at->data, sizeof(int) * (max + 1) * 2);", "inner":[]},{"type":"for", "code":"for (int a = max; a < (max + 1) * 2; ++a)", "inner":[{"type":"statement", "code":"at->data[a] = EMPTY;", "inner":[]}]},{"type":"statement", "code":"at->data[current] = i;", "inner":[]},{"type":"statement", "code":"return;", "inner":[]}]},{"type":"if", "code":"if (at->data[current] == EMPTY)", "inner":[{"type":"statement", "code":"at->data[current] = i;", "inner":[]},{"type":"statement", "code":"return;", "inner":[]}]},{"type":"if", "code":"if (i == at->data[current])", "inner":[{"type":"statement", "code":"return;", "inner":[]}]},{"type":"else if", "code":"else if (i < at->data[current])", "inner":[{"type":"statement", "code":"current = 2 * current + 1;", "inner":[]}]},{"type":"else if", "code":"else if (i > at->data[current])", "inner":[{"type":"statement", "code":"current = 2 * current + 2;", "inner":[]}]}]}]};